package org.example.concurrency;

import java.util.concurrent.CountDownLatch;
import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.Flow;
import java.util.concurrent.SubmissionPublisher;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import java.util.List;
import java.util.concurrent.TimeUnit;

// Latch
class RocketLaunch {
    public static void launch() throws InterruptedException {
        int tasks = 3;
        CountDownLatch latch = new CountDownLatch(tasks);

        new Thread(new PreparationTask(latch, "–ó–∞–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø–ª–∏–≤–∞")).start();
        new Thread(new PreparationTask(latch, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º")).start();
        new Thread(new PreparationTask(latch, "–ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å")).start();

        latch.await(); // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        System.out.println("üöÄ –†–∞–∫–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞!");
    }
}

class PreparationTask implements Runnable {
    private final CountDownLatch latch;
    private final String taskName;

    public PreparationTask(CountDownLatch latch, String taskName) {
        this.latch = latch;
        this.taskName = taskName;
    }

    @Override
    public void run() {
        try {
            System.out.println(taskName + " –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...");
            Thread.sleep((long) (Math.random() * 3000)); // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            System.out.println(taskName + " –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            latch.countDown();
        }
    }
}

// Observer
class NewsPublisher extends Observable {
    public void publishNews(String news) {
        setChanged(); // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        notifyObservers(news); // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    }
}

class NewsSubscriber implements Observer {
    private final String name;

    public NewsSubscriber(String name) {
        this.name = name;
    }

    @Override
    public void update(Observable o, Object arg) {
        System.out.println(name + " –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ—Å—Ç—å: " + arg);
    }
}

class ObserverExample {
    public static void launch() {
        NewsPublisher publisher = new NewsPublisher();

        NewsSubscriber sub1 = new NewsSubscriber("–ê–ª–µ–∫—Å–µ–π");
        NewsSubscriber sub2 = new NewsSubscriber("–ú–∞—Ä–∏—è");

        publisher.addObserver(sub1);
        publisher.addObserver(sub2);

        publisher.publishNews("–í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Java!");
    }
}

// Flow
class TemperatureProcessor implements Flow.Subscriber<Integer> {
    private Flow.Subscription subscription;

    @Override
    public void onSubscribe(Flow.Subscription subscription) {
        this.subscription = subscription;
        subscription.request(1); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    }

    @Override
    public void onNext(Integer temperature) {
        System.out.println("–ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + temperature + "¬∞C");
        subscription.request(1); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    }

    @Override
    public void onError(Throwable throwable) {
        System.out.println("–û—à–∏–±–∫–∞: " + throwable.getMessage());
    }

    @Override
    public void onComplete() {
        System.out.println("–í—Å–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");
    }
}

class FlowExample {
    public static void launch() throws InterruptedException {
        SubmissionPublisher<Integer> publisher = new SubmissionPublisher<>();
        TemperatureProcessor subscriber = new TemperatureProcessor();
        publisher.subscribe(subscriber);

        int[] temperatures = {22, 24, 19, 21, 23};
        for (int temp : temperatures) {
            publisher.submit(temp);
            Thread.sleep(500); // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
        }

        publisher.close();
        Thread.sleep(1000); // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
}

// Guava eventBus
// –ö–ª–∞—Å—Å —Å–æ–±—ã—Ç–∏—è
class LogEvent {
    private final String message;

    public LogEvent(String message) {
        this.message = message;
    }

    public String getMessage() {
        return message;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
class LogListener {
    @Subscribe
    public void handleLogEvent(LogEvent event) {
        System.out.println("–õ–æ–≥: " + event.getMessage());
    }
}

class GuavaEventBusExample {
    public static void launch() {
        EventBus eventBus = new EventBus();
        LogListener listener = new LogListener();
        eventBus.register(listener);

        eventBus.post(new LogEvent("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞"));
        eventBus.post(new LogEvent("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"));
        eventBus.post(new LogEvent("–°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"));
    }
}

// –ö–ª–∞—Å—Å —Å–æ–±—ã—Ç–∏—è - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏
class StockPrice {
    private final String stockName;
    private final double price;

    public StockPrice(String stockName, double price) {
        this.stockName = stockName;
        this.price = price;
    }

    public String getStockName() {
        return stockName;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "–ê–∫—Ü–∏—è: " + stockName + " | –¶–µ–Ω–∞: $" + price;
    }
}

// –ò–∑–¥–∞—Ç–µ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –∞–∫—Ü–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
class StockPublisher extends SubmissionPublisher<StockPrice> {
    public void publishStockPrice(String stockName, double price) {
        submit(new StockPrice(stockName, price));
    }
}

// –ü–æ–¥–ø–∏—Å—á–∏–∫ - –ø–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö
class StockSubscriber implements Flow.Subscriber<StockPrice> {
    private Flow.Subscription subscription;
    private final double threshold; // –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã

    public StockSubscriber(double threshold) {
        this.threshold = threshold;
    }

    @Override
    public void onSubscribe(Flow.Subscription subscription) {
        this.subscription = subscription;
        subscription.request(1); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    }

    @Override
    public void onNext(StockPrice stock) {
        System.out.println("üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: " + stock);
        if (stock.getPrice() > threshold) {
            System.out.println("üî• –í–ù–ò–ú–ê–ù–ò–ï! –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ " + stock.getStockName() + " –ø—Ä–µ–≤—ã—Å–∏–ª–∞ $" + threshold);
        }
        subscription.request(1); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    }

    @Override
    public void onError(Throwable throwable) {
        System.err.println("–û—à–∏–±–∫–∞: " + throwable.getMessage());
    }

    @Override
    public void onComplete() {
        System.out.println("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");
    }
}

// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å - –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
class FlowStockMarket {
    public static void launch() throws InterruptedException {
        StockPublisher publisher = new StockPublisher();
        StockSubscriber subscriber = new StockSubscriber(100.0); // –£–≤–µ–¥–æ–º–ª—è—Ç—å, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ $100
        publisher.subscribe(subscriber);

        List<StockPrice> stockPrices = List.of(
                new StockPrice("AAPL", 95.5),
                new StockPrice("GOOGL", 102.3),
                new StockPrice("AMZN", 97.8),
                new StockPrice("TSLA", 110.5),
                new StockPrice("MSFT", 89.2)
        );

        for (StockPrice stock : stockPrices) {
            publisher.publishStockPrice(stock.getStockName(), stock.getPrice());
            TimeUnit.MILLISECONDS.sleep(500); // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
        }

        publisher.close();
        TimeUnit.SECONDS.sleep(1); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
}
